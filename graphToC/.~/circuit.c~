#include "stdio.h"
#include "string.h"

#define number_of_gates_outputs 7
#define number_of_registers 1
#define number_of_circuit_inputs 2
#define number_of_circuit_outputs 3

char gates_outputs[number_of_gates_outputs];
char registers[number_of_registers] = {0};
char circuit_inputs[number_of_circuit_inputs];
char circuit_outputs[number_of_circuit_outputs];

int main (int argc, char ** argv)
 {
    int read_bytes;
    int cycles;
    int i;
    int step_by_step;
   
    if (argc < 2 || argc > 3 || (argc == 3 && strcmp(argv[1],"-s")))
     {
        fprintf (stderr, "Usage: %s [-s] CYCLES\n", argv[0]);
        return -1;
     }
    for (i = 0 ; argv[argc-1][i] ; i++)
     {
        if ( argv[argc-1][i] < '0' || argv[argc-1][i] > '9' )
         {
            fprintf (stderr, "Usage: %s [-s] CYCLES\n", argv[0]);
            return -1;
         }
     }
    sscanf (argv[argc-1], "%d", &cycles);

    step_by_step = argc == 3;

    read_bytes = fread (circuit_inputs, 1, number_of_circuit_inputs, stdin);
    if (read_bytes != number_of_circuit_inputs)
     {
        fprintf (stderr, "Incomplete input (%d input bits needed)\n",
                        number_of_circuit_inputs);
        return -1;
     }
    
    for (i = 0 ; i < number_of_circuit_inputs ; i++)
     {
        if (circuit_inputs[i] == '0')
         {
            circuit_inputs[i] = 0;
         }
        else if (circuit_inputs[i] == '1')
         {
            circuit_inputs[i] = 1;
         }
        else
         {
            fprintf (stderr, "Bad input format (input must consist of \
0s and 1s)\n");
            return -1;
         }
     }

    gates_outputs[0] = 0;
    gates_outputs[1] = 1;

    gates_outputs[2] = circuit_inputs[0];
    gates_outputs[3] = circuit_inputs[1];

    for (i = 0 ; i <= cycles ; i++ )
     {
    
        gates_outputs[6] = registers[0];
        
        gates_outputs[4] = gates_outputs[2] && gates_outputs[3];
        gates_outputs[5] = gates_outputs[2] != gates_outputs[3];
        registers[0] = gates_outputs[5];  

        if ( i == cycles || step_by_step )
         {
            circuit_outputs[0] = gates_outputs[4] ? '1' : '0';
            circuit_outputs[1] = gates_outputs[5] ? '1' : '0';
            circuit_outputs[2] = gates_outputs[6] ? '1' : '0';
            
            fwrite (circuit_outputs, 1, number_of_circuit_outputs, stdout);
            
            fprintf (stdout, "\n");
         }

     }
    
    return 0;
 }

