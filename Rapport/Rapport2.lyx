#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass paper
\use_default_options true
\begin_modules
theorems-bytype
\end_modules
\language french
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 2cm
\headsep 2cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Rapport du Projet de Système Digital n°2
\end_layout

\begin_layout Author
Ismaël Belghiti, Damien Desfontaines, Guillaume Geoffroy, Kenji Maillard
 
\end_layout

\begin_layout Date
4 janvier 2012
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Nous avons fini la création du simulateur de circuit et du langage de descriptio
n du circuit.
 Depuis le 
\begin_inset CommandInset href
LatexCommand href
name "rapport n°1"
target "http://www.eleves.ens.fr/home/desfonta/rapport.pdf"

\end_inset

, le langage n'a évolué que pour ajouter quelques fonctionnalités supplémentaire
s d'ordre pratique, comme le fait de coder directement une certaine suite
 binaire avec une syntaxe du type $010011, la possibilité de commenter le
 code source ou de le séparer en plusieurs fichiers.
 Nous ne nous attarderons pas sur ces modifications mineures.
\end_layout

\begin_layout Standard
Ce rapport décrit donc l'étape suivante, c'est à dire le dessin du microprocesse
ur et ses caractéristiques techniques.
 
\end_layout

\begin_layout Section
Inspiration et dessin du microprocesseur
\end_layout

\begin_layout Standard
Pour le dessin du microprocesseur, nous nous sommes inspirés des schémas
 de fonctionnement MIPS présents dans l'ouvrage 
\begin_inset CommandInset href
LatexCommand href
name "Computer Organization and Design"
target "http://www.amazon.com/Computer-Organization-Design-Revised-Fourth/dp/0123747503"

\end_inset

.
 Nous donc reprenons ici le schéma global de fonctionnement, tiré de cet
 ouvrage :
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../ArchitectureMipsDetaillee.png
	width 12cm

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Décrivons les différents blocs présents sur ce schéma qu'il a fallu implémenter.
\end_layout

\begin_layout Subsection
ALU
\end_layout

\begin_layout Paragraph*
Principe :
\end_layout

\begin_layout Standard
L'ALU, Unité Arithmétique et Logique en français, est la partie du microprocesse
ur chargée d'effectuer les calculs.
 Elle reçoit un identifiant d'opération du bloc 
\begin_inset Quotes eld
\end_inset

ALU Control
\begin_inset Quotes erd
\end_inset

, effectue l'opération correspondante sur ses deux entrées et renvoie le
 résultat.
 Il s'agit donc d'un bloc purement combinatoire : rien n'est stocké dans
 l'ALU, qui ne contient donc aucun registre et effectue toutes les opérations
 en un seul cycle.
\end_layout

\begin_layout Paragraph*
Opérations implémentées :
\end_layout

\begin_layout Standard
Les opérations implémentées sont les opérations arithmétiques et logiques
 classiques : + , - , * , And, Or, Xor, Nand, Nor (la division n'est pour
 l'heure pas incluse).
 Le fichier Alu.rock présente ce bloc, les commentaires à la fin du fichier
 devraient être suffisants pour pouvoir lancer quelques tests.
\end_layout

\begin_layout Subsection
Registres
\end_layout

\begin_layout Standard
Le bloc de registres contient 32 registres, dont l'organisation et le fonctionne
ment sont calqués sur le modèle MIPS.
 Ou pas.
 TODO
\end_layout

\begin_layout Subsection
Control
\end_layout

\begin_layout Standard
Le bloc de contrôle, présent dans notre projet sous le nom de 
\begin_inset Quotes eld
\end_inset

Décodeur
\begin_inset Quotes erd
\end_inset

 a dans notre projet non seulement le rôle du bloc 
\begin_inset Quotes eld
\end_inset

Control
\begin_inset Quotes erd
\end_inset

 de l'architecture standart MIPS mais c'est aussi lui qui s'occupe de la
 synchronisation entre les différents cycles parcourus pour une instruction
 donnée.
 TODO à détailler
\end_layout

\begin_layout Subsection
Instruction Memory
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
Data Memory
\end_layout

\begin_layout Standard
La mémoire va être implémentée par un device.
 TODO à détailler
\end_layout

\begin_layout Section
Détails techniques
\end_layout

\begin_layout Subsection
Format des instructions
\end_layout

\begin_layout Standard
TODO explication du 
\begin_inset Formula $R$
\end_inset

-format, 
\begin_inset Formula $I$
\end_inset

-format, format des jumps, etc.
\end_layout

\begin_layout Subsection
ALU
\end_layout

\begin_layout Paragraph*
Fonctionnement :
\end_layout

\begin_layout Standard
Le bloc Alu<m> du code source prend 3 entrées :
\end_layout

\begin_layout Itemize
deux arguments 
\begin_inset Formula $a$
\end_inset

 et 
\begin_inset Formula $b$
\end_inset

 sur 
\begin_inset Formula $m$
\end_inset

 bits,
\end_layout

\begin_layout Itemize
un sélecteur d'opération sur 4 bits,
\end_layout

\begin_layout Standard
et en fonction de la valeur du sélecteur, qui contient le 
\begin_inset Quotes eld
\end_inset

code
\begin_inset Quotes erd
\end_inset

 de l'opération voulue (0 pour And, 1 pour Or, etc.), il renvoie le résultat
 sur 
\begin_inset Formula $m$
\end_inset

 bits, tronqué si besoin (les éventuelles retenues sont perdues, tous les
 calculs sont faits modulo 
\begin_inset Formula $2^{m}$
\end_inset

).
\end_layout

\begin_layout Paragraph*
Comment ça marche :
\end_layout

\begin_layout Standard
Chaque opération de l'ALU est codée séparément.
 Puis, à la lecture de deux entiers, toutes les opérations possibles sont
 exécutées simultanément, et un filtre sélectionne le résultat voulu.
 Tout fonctionne en un seul cycle, et les circuits correspondant aux diverses
 opérations ont tous été codés récursivement.
\end_layout

\begin_layout Subsection
Registres
\end_layout

\begin_layout Standard
TODO, etc.
\end_layout

\end_body
\end_document
