#include "stdio.h"
#include "string.h"
#include "sys/time.h"
#include <cstdlib>

namespace {

char $(gates_outputs_array_name)[$(gates_outputs_array_length)]$(init_gates_outputs_array);
char $(registers_array_name)[$(registers_array_length)]$(init_registers_array);
char $(circuit_outputs_array_name)[$(circuit_outputs_array_length)];
char $(circuit_inputs_array_name)[$(circuit_inputs_array_length)];
char $(devices_array_name)[$(devices_array_length)]$(init_devices_array);

int * $(active_registers_array_name);
int * $(active_registers_gates_array_name);
int $(active_registers_array_length) = $(active_registers_array_default_length);
int $(active_registers_list_length) = 0;

char usage_information[] = "\
Usage: %s <options> <cycles>\n\
Options are:\n\
  -s  Print outputs on every cycle\n\
  -c <frequency>  Set the clock speed at <frequency> cycles per second\n";

bool stopping = false;

void add_time (struct timeval * time, unsigned int add_usec);
bool time_gt (struct timeval * a, struct timeval * b);

void add_time (struct timeval * time, unsigned int add_usec)
 {
    unsigned int x = time->tv_usec + add_usec;
    while (x >= 1000000)
     {
        time->tv_sec++;
        x -= 1000000;
     }
    time->tv_usec = x;
 }

bool time_gt (struct timeval * a, struct timeval * b)
 {
   return (a->tv_sec > b->tv_sec)
     || ((a->tv_sec == b->tv_sec) && (a->tv_usec > b->tv_usec));
 }

}

namespace circuit
{
  void stop()
  {
    stopping = true;
  }
}

void $(add_active_register_function_name)(int register_number, int gate_output_number)
 {
    if ($(active_registers_list_length) == $(active_registers_array_length))
     {
        $(active_registers_array_length) *= 2;
        $(active_registers_array_name)
        = reinterpret_cast<int*> (realloc($(active_registers_array_name),
        $(active_registers_array_length) * sizeof(*$(active_registers_array_name))));
        $(active_registers_gates_array_name)
        = reinterpret_cast<int*> (realloc($(active_registers_gates_array_name),
        $(active_registers_array_length) * sizeof(*$(active_registers_gates_array_name))));
     }
    $(active_registers_list_length)++;
    $(active_registers_array_name)[$(active_registers_list_length)-1] = register_number;
    $(active_registers_gates_array_name)[$(active_registers_list_length)-1] = gate_output_number;
 }
 
int main (int argc, char ** argv)
 {
    int read_bytes;
    int cycles;
    int i;
    int j;
    
    bool step_by_step = false;
    bool clocked = false;
    unsigned int clock_period;

    struct timeval current_time;
    struct timeval simulated_time;    

    $(active_registers_array_name) = reinterpret_cast<int*>
    (malloc($(active_registers_array_length) * sizeof(*$(active_registers_array_name))));
    $(active_registers_gates_array_name) = reinterpret_cast<int*>
    (malloc($(active_registers_array_length) * sizeof(*$(active_registers_gates_array_name))));

    $(address_var_type) $(address_var_name);
    $(data_var_type) $(data_var_name);
    $(byte_enables_var_type) $(byte_enables_var_name);
   
    for (i = 1; i < argc - 1; i++)
     {
       if (strcmp(argv[i],"-s") == 0)
        {
          step_by_step = true;
        }
       else if (strcmp(argv[i],"-c") == 0)
        {
          clocked = true;
          i++;
          
          if (i >= argc) fprintf (stderr, usage_information, argv[0]);

          for (j = 0 ; argv[i][j] ; j++)
           {
              if ( argv[i][j] < '0' || argv[i][j] > '9' )
               {
                 fprintf (stderr, usage_information, argv[0]);
                 return -1;
               }
           }

          sscanf (argv[i], "%d", &clock_period);
          clock_period = 1000000 / clock_period;
        }
       else
        {
          fprintf (stderr, usage_information, argv[0]);
          return -1;
        }
     }

    if (i != argc - 1)
     {
        fprintf (stderr, usage_information, argv[0]);
        return -1;
     }

    for (j = 0 ; argv[i][j] ; j++)
     {
        if ( argv[i][j] < '0' || argv[i][j] > '9' )
         {
            fprintf (stderr, usage_information, argv[0]);
            return -1;
         }
     }
    sscanf (argv[i], "%d", &cycles);

    read_bytes = fread (circuit_inputs,1, $(circuit_inputs_array_length), stdin);
    if (read_bytes != $(circuit_inputs_array_length))
     {
        fprintf (stderr, "Incomplete input (%d input bits needed)\n",
                        $(circuit_inputs_array_length));
        return -1;
     }
    
    for (i = 0 ; i < $(circuit_inputs_array_length) ; i++)
     {
       if ($(circuit_inputs_array_name)[i] == '0')
         {
            $(circuit_inputs_array_name)[i] = 0;
         }
        else if ($(circuit_inputs_array_name)[i] == '1')
         {
            $(circuit_inputs_array_name)[i] = 1;
         }
        else
         {
            fprintf (stderr, "Bad input format (input must consist of \
0s and 1s)\n");
            return -1;
         }
     }

    $(gates_outputs_array_name)[0] = 0;
    $(gates_outputs_array_name)[1] = 1;

